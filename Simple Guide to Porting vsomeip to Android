					      
				VSome IP  Porting to Android 

The vsomeip stack implements the Scalable service-Oriented MiddlewarE over IP (SOME/IP) protocol. The stack consists out of:
a shared library for SOME/IP (libvsomeip.so) 
a second shared library for SOME/IP’s service discovery (libvsomeip-sd.so) which is loaded during runtime if the service discovery is enabled. 

Vsomeip has following depency with other libarary 
Boostlibrary version  >= 1.54 
Build Tools required :
android-ndk Installation:
Android ndk latest version need to be installed .
Download Link:
https://developer.android.com/ndk/downloads/index.html#stable-downloads
Step 1: Create the folder as someip in home directory 
	mkdir ~/someip
Step 2: Unzip the android-ndk-r15c-linux-x86_64.zip to home directory using below command
	unzip  android-ndk-r15c-linux-x86_64.zip  ~/someip
Step 3: Change the conetent of RELEASE.txt to below 
	10d (64-bit)
Building the Boostlibrary:
Step 1:  Donwload the source from the below link via below command 
	cd ~/
	git clone https://github.com/moritz-wundke/Boost-for-Android
Step 2:  Navigate to Boost-for-Android directory 
	cd ~/Boost-for-Android
Step 3:  excecute the below command terminal
	  NDK_ROOT=~/someip/android-ndk-r15c
	./build-android.sh --boost=1.55.0 $NDK_ROOT 


Step 4:  Edit the user-config-boost-1_55_0.jam as below . 
             
# Copyright 2003, 2005 Douglas Gregor
# Copyright 2004 John Maddock
# Copyright 2002, 2003, 2004, 2007 Vladimir Prus
# Distributed under the Boost Software License, Version 1.0.
# (See accompanying file LICENSE_1_0.txt or http://www.boost.org/LICENSE_1_0.txt)

#   This file is used to configure your Boost.Build installation. You can modify
# this file in place, or you can place it in a permanent location so that it
# does not get overwritten should you get a new version of Boost.Build. See:
#
#   http://www.boost.org/boost-build2/doc/html/bbv2/overview/configuration.html
#
# for documentation about possible permanent locations.

#   This file specifies which toolsets (C++ compilers), libraries, and other
# tools are available. Often, you should be able to just uncomment existing
# example lines and adjust them to taste. The complete list of supported tools,
# and configuration instructions can be found at:
#
#   http://boost.org/boost-build2/doc/html/bbv2/reference/tools.html
#

#   This file uses Jam language syntax to describe available tools. Mostly,
# there are 'using' lines, that contain the name of the used tools, and
# parameters to pass to those tools -- where paremeters are separated by
# semicolons. Important syntax notes:
#
#   - Both ':' and ';' must be separated from other tokens by whitespace
#   - The '\' symbol is a quote character, so when specifying Windows paths you
#     should use '/' or '\\' instead.
#
# More details about the syntax can be found at:
#
#   http://boost.org/boost-build2/doc/html/bbv2/advanced.html#bbv2.advanced.jam_language
#
# ------------------
# Android configurations.
# ------------------

import os ;
local AndroidNDKRoot = [ os.environ AndroidNDKRoot ] ;

# --------------------------------------------------------------------
# Is same for 8b, 8c and 8d
using gcc : androidR8b
:
arm-linux-androideabi-g++
:
<archiver>arm-linux-androideabi-ar
<compileflags>-fexceptions
<compileflags>-frtti
<compileflags>-fpic
<compileflags>-ffunction-sections
<compileflags>-funwind-tables
<compileflags>-D__ARM_ARCH_5__
<compileflags>-D__ARM_ARCH_5T__
<compileflags>-D__ARM_ARCH_5E__
<compileflags>-D__ARM_ARCH_5TE__
<compileflags>-Wno-psabi
<compileflags>-march=armv5te
<compileflags>-mtune=xscale
<compileflags>-msoft-float
<compileflags>-mthumb
<compileflags>-Os
<compileflags>-fomit-frame-pointer
<compileflags>-fno-strict-aliasing
<compileflags>-finline-limit=64
<compileflags>-I$(AndroidNDKRoot)/platforms/android-9/arch-arm/usr/include
<compileflags>-Wa,--noexecstack
<compileflags>-DANDROID
<compileflags>-D__ANDROID__
<compileflags>-DNDEBUG
<compileflags>-O2
<compileflags>-g
<compileflags>-I$(AndroidNDKRoot)/sources/cxx-stl/gnu-libstdc++/4.9/include
<compileflags>-I$(AndroidNDKRoot)/sources/cxx-stl/gnu-libstdc++/4.9/libs/armeabi/include
# @Moss - Above are the 'oficial' android flags
<compileflags>--sysroot=$(AndroidNDKRoot)/platforms/android-19/arch-arm
<linkflags>--sysroot=$(AndroidNDKRoot)/platforms/android-19/arch-arm
<architecture>arm
<compileflags>-fvisibility=hidden
<compileflags>-fvisibility-inlines-hidden
<compileflags>-fdata-sections
<cxxflags>-D__arm__
<cxxflags>-D_REENTRANT
<cxxflags>-D_GLIBCXX__PTHREADS
;

# --------------------------------------------------------------------
using gcc : androidR8e
:
arm-linux-androideabi-g++
:
<archiver>arm-linux-androideabi-ar
<compileflags>-fexceptions
<compileflags>-frtti
<compileflags>-fpic
<compileflags>-ffunction-sections
<compileflags>-funwind-tables
<compileflags>-D__ARM_ARCH_5__
<compileflags>-D__ARM_ARCH_5T__
<compileflags>-D__ARM_ARCH_5E__
<compileflags>-D__ARM_ARCH_5TE__
<compileflags>-Wno-psabi
<compileflags>-march=armv5te
<compileflags>-mtune=xscale
<compileflags>-msoft-float
<compileflags>-mthumb
<compileflags>-Os
<compileflags>-fomit-frame-pointer
<compileflags>-fno-strict-aliasing
<compileflags>-finline-limit=64
<compileflags>-I$(AndroidNDKRoot)/platforms/android-9/arch-arm/usr/include
<compileflags>-Wa,--noexecstack
<compileflags>-DANDROID
<compileflags>-D__ANDROID__
<compileflags>-DNDEBUG
<compileflags>-O2
<compileflags>-g
<compileflags>-I$(AndroidNDKRoot)/sources/cxx-stl/gnu-libstdc++/4.9/include
<compileflags>-I$(AndroidNDKRoot)/sources/cxx-stl/gnu-libstdc++/4.9/libs/armeabi/include
# @Moss - Above are the 'oficial' android flags
<compileflags>--sysroot=$(AndroidNDKRoot)/platforms/android-19/arch-arm
<linkflags>--sysroot=$(AndroidNDKRoot)/platforms/android-19/arch-arm
<architecture>arm
<compileflags>-fvisibility=hidden
<compileflags>-fvisibility-inlines-hidden
<compileflags>-fdata-sections
<cxxflags>-D__arm__
<cxxflags>-D_REENTRANT
<cxxflags>-D_GLIBCXX__PTHREADS
;


# ------------------
# GCC configuration.
# ------------------

# Configure gcc (default version).
# using gcc ;

# Configure specific gcc version, giving alternative name to use.
# using gcc : 3.2 : g++-3.2 ;


# -------------------
# MSVC configuration.
# -------------------

# Configure msvc (default version, searched for in standard locations and PATH).
# using msvc ;

# Configure specific msvc version (searched for in standard locations and PATH).
# using msvc : 8.0 ;


# ----------------------
# Borland configuration.
# ----------------------
# using borland ;


# ----------------------
# STLPort configuration.
# ----------------------

#   Configure specifying location of STLPort headers. Libraries must be either
# not needed or available to the compiler by default.
# using stlport : : /usr/include/stlport ;

# Configure specifying location of both headers and libraries explicitly.
# using stlport : : /usr/include/stlport /usr/lib ;


# -----------------
# QT configuration.
# -----------------

# Configure assuming QTDIR gives the installation prefix.
# using qt ;

# Configure with an explicit installation prefix.
# using qt : /usr/opt/qt ;

# ---------------------
# Python configuration.
# ---------------------

# Configure specific Python version.
# using python : 3.1 : /usr/bin/python3 : /usr/include/python3.1 : /usr/lib ;

After the above step library generated in and header files are genearted in below path.
Lib file path:
~/someip/Boost-for-Android/build/lib
Header file path:
~/someip/Boost-for-Android/build/include

Building vsomeip:
While building the someip which need the libboost library as a dependency , so after following above step then you need start building the someip.
Step 1: Download the vsomeip code from github by issuing below command 
	cd someip
	git clone https://github.com/GENIVI/vsomeip
Step 2:  Create arm-tool chain config
            cd  ~/someip/vsomeip
	touch arm-toolchain.cmake
Step 3:  copy below lines in arm-toolchain.cmake file
 	 SET(CMAKE_SYSTEM_NAME Linux) 
	SET(CMAKE_SYSTEM_VERSION 1) 
	SET(CMAKE_SYSTEM_PROCESSOR arm) 
	SET(CMAKE_C_COMPILER   arm-linux-androideabi-gcc) 
	SET(CMAKE_CXX_COMPILER arm-linux-androideabi-g++) 
	SET (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} –sysroot=~/someip/android-ndk-	r10e/platforms/android-19/arch-arm" CACHE STRING "" FORCE) 
	SET (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} –sysroot=~/someip/android-	ndk-r10e/platforms/android-19/arch-arm" CACHE STRING "" FORCE) 
	 SET(CMAKE_FIND_ROOT_PATH “~/someip/Boost-for-Android/build/lib 	~/someip/android-ndk-r10e/sources/cxx-stl/gnu-libstdc++/4.9/libs/armeabi ~/someip/genivi-	dlt-android/libs/armeabi") 
	SET(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER) 
	SET(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY) 
	SET(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)

Step 4:  Take the backup of CmakeLists.txt  and copy the below content 
           # Copyright (C) 2015-2017 Bayerische Motoren Werke Aktiengesellschaft (BMW AG) 
# This Source Code Form is subject to the terms of the Mozilla Public 
# License, v. 2.0. If a copy of the MPL was not distributed with this 
# file, You can obtain one at http://mozilla.org/MPL/2.0/. 

cmake_minimum_required (VERSION 2.8.12) 
project (vsomeip) 

set (VSOMEIP_MAJOR_VERSION 2) 
set (VSOMEIP_MINOR_VERSION 7) 
set (VSOMEIP_PATCH_VERSION 0) 
set (VSOMEIP_VERSION ${VSOMEIP_MAJOR_VERSION}.${VSOMEIP_MINOR_VERSION}.${VSOMEIP_PATCH_VERSION}) 
set (PACKAGE_VERSION ${VSOMEIP_VERSION}) # Used in documentatin/doxygen.in 
set (CMAKE_VERBOSE_MAKEFILE off) 

################################################################################################### 
# see http://www.cmake.org/Wiki/CMake/Tutorials/How_to_create_a_ProjectConfig.cmake_file 
################################################################################################### 

# Offer the user the choice of overriding the installation directories 
set (INSTALL_LIB_DIR lib CACHE PATH "Installation directory for libraries") 
set (INSTALL_BIN_DIR bin CACHE PATH "Installation directory for executables") 
set (INSTALL_INCLUDE_DIR include CACHE PATH "Installation directory for header files") 

if (WIN32 AND NOT CYGWIN) 
    set (DEF_INSTALL_CMAKE_DIR CMake) 
else () 
    set (DEF_INSTALL_CMAKE_DIR lib/cmake/vsomeip) 
endif () 

set (INSTALL_CMAKE_DIR ${DEF_INSTALL_CMAKE_DIR} CACHE PATH "Installation directory for CMake files") 

# Make relative paths absolute (needed later on) 
foreach (p LIB BIN INCLUDE CMAKE) 
    set (var INSTALL_${p}_DIR) 
    if (NOT IS_ABSOLUTE "${${var}}") 
        set (ABSOLUTE_${var} "${CMAKE_INSTALL_PREFIX}/${${var}}") # Add all targets to the build-tree export set 
    endif () 
endforeach () 

################################################################################################### 

# OS 
if (${CMAKE_SYSTEM_NAME} MATCHES "Linux") 
    set(OS "LINUX") 
    set(DL_LIBRARY "dl") 
    set(EXPORTSYMBOLS "-Wl,-export-dynamic -Wl,--version-script=${CMAKE_CURRENT_SOURCE_DIR}/exportmap.gcc") 
    set(NO_DEPRECATED "") 
    set(OPTIMIZE "") 
    set(OS_CXX_FLAGS "-D_GLIBCXX_USE_NANOSLEEP  -lgnustl_shared -lboost_filesystem-gcc-mt-1_55 -lboost_log-gcc-mt-1_55 -std=c++11 -DANDROID_STL=c++_shared -lrt -pthread -O -Wall -Wextra -Wformat -Wformat-security -Wconversion -fexceptions -fstrict-aliasing -fstack-protector -fasynchronous-unwind-tables -fno-omit-frame-pointer -D_FORTIFY_SOURCE=2") 

endif (${CMAKE_SYSTEM_NAME} MATCHES "Linux") 

if (${CMAKE_SYSTEM_NAME} MATCHES "FreeBSD") 
    set(OS "FREEBSD") 
    set(DL_LIBRARY "") 
    set(EXPORTSYMBOLS "") 
    set(NO_DEPRECATED "-Wno-deprecated") 
    set(OPTIMIZE "") 
    set(OS_CXX_FLAGS "-pthread") 
endif (${CMAKE_SYSTEM_NAME} MATCHES "FreeBSD") 

# Signal handling 
if (ENABLE_SIGNAL_HANDLING) 
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DVSOMEIP_ENABLE_SIGNAL_HANDLING") 
endif () 

include_directories( 
    "interface" 
) 

# Threads 
find_package(Threads REQUIRED) 

# Boost 
#find_package( Boost 1.55 COMPONENTS system thread log REQUIRED ) 
#include_directories( ${Boost_INCLUDE_DIR} ) 
#if(Boost_FOUND) 
#  if(Boost_LIBRARY_DIR) 
#    MESSAGE( STATUS "Boost_LIBRARY_DIR not empty using it: ${Boost_LIBRARY_DIR}" ) 
#  else() 
#    if(BOOST_LIBRARYDIR) 
#      MESSAGE( STATUS "Boost_LIBRARY_DIR empty but BOOST_LIBRARYDIR is set setting Boost_LIBRARY_DIR to: ${BOOST_LIBRARYDIR}" ) 
#      set(Boost_LIBRARY_DIR ${BOOST_LIBRARYDIR}) 
#    endif() 
#  endif() 
#else() 
#  MESSAGE( STATUS "Boost was not found!") 
#endif() 

set(BOOST_ROOT "${CMAKE_CURRENT_SOURCE_DIR}/../Boost-for-Android/build") 
set(BOOST_INCLUDE_DIR "${BOOST_ROOT}/include/boost-1_55") 
set(BOOST_LIBRARY_DIR "${BOOST_ROOT}/lib") 
set(Boost_LIBRARY_DIR ${BOOST_LIBRARY_DIR}) 
set(Boost_LIBRARIES ${BOOST_LIBRARY_DIR}) 
include_directories(${BOOST_INCLUDE_DIR}) 
link_directories(${Boost_LIBRARY_DIR}) 

include_directories(~/someip/android-ndk-r15c/sources/cxx-stl/gnu-libstdc++/4.9/include) 
include_directories(~/someip/android-ndk-r15c/sources/cxx-stl/gnu-libstdc++/4.9/libs/armeabi/include) 
include_directories(~/someip/android-ndk-r15c/platforms/android-19/arch-arm/usr/include) 
include_directories(~/someip/genivi-dlt-android/include) 
include_directories(~/someip/genivi-dlt-android/musl/include) 
set (DLT_INCLUDE_DIRS "${CMAKE_CURRENT_SOURCE_DIR}/../genivi-dlt-android/include") 
set (DLT_LIBDIR "${CMAKE_CURRENT_SOURCE_DIR}/../genivi-dlt-android/libs/armeabi/libdlt.so") 
set (clib "${CMAKE_CURRENT_SOURCE_DIR}/../android-ndk-r15c/sources/cxx-stl/gnu-libstdc++/4.9/libs/armeabi") 
set (arch-arm "~/someip/android-ndk-r15c/platforms/android-19/arch-arm/usr/lib") 
link_directories(${arch-arm}) 
link_directories(${clib}) 
link_directories(${DLT_LIBDIR}) 

# DLT 
find_package(PkgConfig) 
#pkg_check_modules(DLT "automotive-dlt >= 2.11") 
#IF(DLT_FOUND) 
#set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_DLT") 
#ENDIF(DLT_FOUND) 

# SystemD 
pkg_check_modules(SystemD "libsystemd") 

if(NOT SystemD_FOUND) 
MESSAGE( STATUS "Systemd was not found, watchdog disabled!") 
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DWITHOUT_SYSTEMD") 
endif(NOT SystemD_FOUND) 

include_directories( 
    include 
    implementation/helper 
    ${DLT_INCLUDE_DIRS} 
) 

link_directories( 
    ${DLT_LIBDIR} 
) 
 
# Base library 
file(GLOB vsomeip_SRC 
    "implementation/endpoints/src/*.cpp" 
    "implementation/logging/src/*.cpp" 
    "implementation/tracing/src/*.cpp" 
    "implementation/message/src/*.cpp" 
    "implementation/routing/src/*.cpp" 
    "implementation/runtime/src/*.cpp" 
    "implementation/utility/src/*.cpp" 
    "implementation/plugin/src/*.cpp" 
) 

file(GLOB_RECURSE vsomeip_e2e_SRC 
    "implementation/e2e_protection/src/*.cpp" 
) 

list(SORT vsomeip_SRC) 
list(SORT vsomeip_e2e_SRC) 

add_definitions(-DVSOMEIP_VERSION="${VSOMEIP_VERSION}") 

if (MSVC) 
    message("using MSVC Compiler") 
    # add_definitions(-DVSOMEIP_DLL_COMPILATION) now it is controlled per target 
    SET(BOOST_WINDOWS_VERSION "0x600" CACHE STRING "Set the same Version as the Version with which Boost was built, otherwise there will be errors. (normaly 0x600 is for Windows 7 and 0x501 is for Windows XP)") 
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -D_WINSOCK_DEPRECATED_NO_WARNINGS -D_WIN32_WINNT=${BOOST_WINDOWS_VERSION} -DWIN32 -DUSE_VSOMEIP_STATISTICS -DCOMMONAPI_INTERNAL_COMPILATION -DBOOST_LOG_DYN_LINK -DBOOST_ASIO_DISABLE_IOCP /EHsc") 
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D_CRT_SECURE_NO_WARNINGS -D_SCL_SECURE_NO_WARNINGS -D_WINSOCK_DEPRECATED_NO_WARNINGS -D_WIN32_WINNT=${BOOST_WINDOWS_VERSION} -DWIN32 -DUSE_VSOMEIP_STATISTICS -DCOMMONAPI_INTERNAL_COMPILATION -DBOOST_LOG_DYN_LINK -DBOOST_ASIO_DISABLE_IOCP /EHsc") 
    set(USE_RT "") 
    set(Boost_LIBRARIES "") 
    link_directories(${Boost_LIBRARY_DIR_DEBUG}) 
    ADD_DEFINITIONS( -DBOOST_ALL_DYN_LINK ) 
else() 
    set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D${OS} ${OS_CXX_FLAGS} -DUSE_VSOMEIP_STATISTICS -DBOOST_LOG_DYN_LINK -g ${OPTIMIZE} -std=c++0x ${NO_DEPRECATED} ${EXPORTSYMBOLS}") 
    set(USE_RT "rt") 
endif() 

add_library(vsomeip SHARED ${vsomeip_SRC} ${vsomeip_e2e_SRC}) 
set_target_properties (vsomeip PROPERTIES VERSION ${VSOMEIP_VERSION} SOVERSION ${VSOMEIP_MAJOR_VERSION}) 
# PRIVATE means the listed libraries won't be included in the "link interface", 
# meaning the exported vsomeipTargets.cmake targets won't try to link against 
# them (which shouldn't be required). ${Boost_LIBRARIES} includes absolute 
# build host paths as of writing, which also makes this important as it breaks 
# the build. 
target_link_libraries(vsomeip PRIVATE ${Boost_LIBRARIES} ${USE_RT} ${DL_LIBRARY} ${DLT_LIBRARIES} ${SystemD_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT} ${clib} ${DLT_LIBDIR}) 

# Configuration library 
file(GLOB vsomeip-cfg_SRC 
    "implementation/configuration/src/*.cpp" 
) 
list(SORT vsomeip-cfg_SRC) 

add_library(vsomeip-cfg SHARED ${vsomeip-cfg_SRC}) 
set_target_properties (vsomeip-cfg PROPERTIES VERSION ${VSOMEIP_VERSION} SOVERSION ${VSOMEIP_MAJOR_VERSION}) 
target_link_libraries(vsomeip-cfg vsomeip ${Boost_LIBRARIES} ${USE_RT} ${DL_LIBRARY} ${SystemD_LIBRARIES} ${clib} ${arch-arm} ${DLT_LIBDIR}) 

# Service-Discovery library 
file(GLOB vsomeip-sd_SRC 
    "implementation/service_discovery/src/*.cpp" 
) 
list(SORT vsomeip-sd_SRC) 

add_library(vsomeip-sd SHARED ${vsomeip-sd_SRC}) 
set_target_properties (vsomeip-sd PROPERTIES VERSION ${VSOMEIP_VERSION} SOVERSION ${VSOMEIP_MAJOR_VERSION}) 
target_link_libraries(vsomeip-sd vsomeip ${Boost_LIBRARIES} ${USE_RT} ${DL_LIBRARY} ${SystemD_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT} ${clib} ${arch-arm} ${DLT_LIBDIR}) 

if (MSVC) 
    set_target_properties(vsomeip-cfg PROPERTIES COMPILE_DEFINITIONS "VSOMEIP_DLL_COMPILATION_PLUGIN") 
    set_target_properties(vsomeip-sd PROPERTIES COMPILE_DEFINITIONS "VSOMEIP_DLL_COMPILATION_PLUGIN") 
    set_target_properties(vsomeip PROPERTIES COMPILE_DEFINITIONS "VSOMEIP_DLL_COMPILATION") 
endif() 

# Configuration files 

set(EXAMPLE_CONFIG_FILES 
    "config/vsomeip.json" 
    "config/vsomeip-local.json" 
    "config/vsomeip-tcp-client.json" 
    "config/vsomeip-tcp-service.json" 
    "config/vsomeip-udp-client.json" 
    "config/vsomeip-udp-service.json" 
) 

################################################################################################### 
set (VSOMEIP_DIAGNOSIS_ADDRESS "0x00") 
if (DIAGNOSIS_ADDRESS) 
set (VSOMEIP_DIAGNOSIS_ADDRESS ${DIAGNOSIS_ADDRESS}) 
endif () 
set (VSOMEIP_UNICAST_ADDRESS "127.0.0.1") 
if (UNICAST_ADDRESS) 
set (VSOMEIP_UNICAST_ADDRESS ${UNICAST_ADDRESS}) 
endif () 
set (VSOMEIP_ROUTING "vsomeipd") 
if (ROUTING) 
set (VSOMEIP_ROUTING ${ROUTING}) 
endif () 
set (VSOMEIP_ROUTING_READY_MESSAGE "SOME/IP routing ready.") 
if (ROUTING_READY_MESSAGE) 
set (VSOMEIP_ROUTING_READY_MESSAGE ${ROUTING_READY_MESSAGE}) 
endif () 
message("Predefined unicast address: ${VSOMEIP_UNICAST_ADDRESS}") 
message("Predefined diagnosis address: ${VSOMEIP_DIAGNOSIS_ADDRESS}") 
message("Predefined routing application: ${VSOMEIP_ROUTING}") 

################################################################################################### 

set(INCLUDE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/interface/vsomeip") 

file (GLOB_RECURSE vsomeip_INCLUDE RELATIVE ${INCLUDE_PATH} "interface/*.hpp"  ) 
list (SORT vsomeip_INCLUDE) 

foreach ( file ${vsomeip_INCLUDE} ) 
    get_filename_component( dir ${file} DIRECTORY ) 
    install( FILES "${INCLUDE_PATH}/${file}" DESTINATION "${INSTALL_INCLUDE_DIR}/vsomeip/${dir}" COMPONENT dev) 
endforeach() 

install ( 
    TARGETS vsomeip 
    # IMPORTANT: Add the vsomeip library to the "export-set" 
    EXPORT vsomeipTargets 
    RUNTIME DESTINATION "${INSTALL_BIN_DIR}" COMPONENT 
    LIBRARY DESTINATION "${INSTALL_LIB_DIR}" COMPONENT 
    ARCHIVE DESTINATION "${INSTALL_LIB_DIR}" 
    COMPONENT dev 
) 

install ( 
    TARGETS vsomeip-cfg 
    LIBRARY DESTINATION "${INSTALL_LIB_DIR}" COMPONENT shlib 
    RUNTIME DESTINATION "${INSTALL_BIN_DIR}" COMPONENT bin 
) 

install ( 
    TARGETS vsomeip-sd 
    LIBRARY DESTINATION "${INSTALL_LIB_DIR}" COMPONENT shlib 
    RUNTIME DESTINATION "${INSTALL_BIN_DIR}" COMPONENT bin 
) 

install ( 
  FILES ${EXAMPLE_CONFIG_FILES} DESTINATION etc/vsomeip COMPONENT config 
) 

# Add all targets to the build-tree export set 
export (TARGETS vsomeip FILE "${PROJECT_BINARY_DIR}/vsomeipTargets.cmake") 

# Export the package for use from the build-tree 
# (this registers the build-tree with a global CMake-registry) 
export (PACKAGE vsomeip) 

# Create the vsomeipConfig.cmake and vsomeipConfigVersion files 
file (RELATIVE_PATH REL_INCLUDE_DIR "${ABSOLUTE_INSTALL_CMAKE_DIR}" "${ABSOLUTE_INSTALL_INCLUDE_DIR}") 

# ... for the build tree 
set (CONF_INCLUDE_DIRS "${PROJECT_SOURCE_DIR}/interface" "${PROJECT_BINARY_DIR}") 
configure_file (vsomeipConfig.cmake.in "${PROJECT_BINARY_DIR}/vsomeipConfig.cmake" @ONLY) 

# ... for the install tree 
set (CONF_INCLUDE_DIRS "\${VSOMEIP_CMAKE_DIR}/${REL_INCLUDE_DIR}") 
configure_file (vsomeipConfig.cmake.in "${PROJECT_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/vsomeipConfig.cmake" @ONLY) 

# ... for both 
configure_file (vsomeipConfigVersion.cmake.in "${PROJECT_BINARY_DIR}/vsomeipConfigVersion.cmake" @ONLY) 

# confugure internal.hpp for correct version number 
configure_file ( 
   "${PROJECT_SOURCE_DIR}/implementation/configuration/include/internal.hpp.in" 
   "${PROJECT_SOURCE_DIR}/implementation/configuration/include/internal.hpp" 
) 

# Install the vsomeipConfig.cmake and vsomeipConfigVersion.cmake 
install ( 
    FILES 
    "${PROJECT_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/vsomeipConfig.cmake" 
    "${PROJECT_BINARY_DIR}/vsomeipConfigVersion.cmake" 
    DESTINATION "${INSTALL_CMAKE_DIR}" 
    COMPONENT dev 
) 

# Install the export set for use with the install-tree 
install ( 
    EXPORT vsomeipTargets 
    DESTINATION "${INSTALL_CMAKE_DIR}" 
    COMPONENT dev 
) 

############################################################################## 
# build documentation 
############################################################################## 
add_custom_target(doc) 

find_package(Doxygen) 
if (NOT DOXYGEN_FOUND) 
    message(WARNING "Doxygen is not installed. Documentation can not be built.") 
else() 
    # set configuration variables for doxygen.in 
    set(PROJECT "vsomeip") 
    set(DOCDIR documentation) 
    set(SRCDIR .) 
    set(GENERATE_HTML YES) 
    set(GENERATE_HTMLHELP NO) 
    set(GENERATE_CHI NO) 
    set(GENERATE_LATEX NO) 
    set(GENERATE_PDF NO) 
    set(GENERATE_RTF NO) 
    set(GENERATE_MAN NO) 
    set(GENERATE_XML NO) 
    set(HAVE_DOT YES) 

    if(HAVE_DOT) 
        # Note: the @DOT_PATH@ variable won't be used in doxygen.in as doxygen 
        # somehow manages to strip the last slash from the path and therfore no 
        # graphs are generated. Therefore dot should be available in your $PATH 
        FIND_PROGRAM(DOT_PATH dot) 
        if ("${DOT_PATH}" STREQUAL "DOT_PATH-NOTFOUND") 
            message(WARNING "dot (graphviz) is not installed. Graphs in documentation can't be generated.") 
        else() 
            message("dot found") 
        endif() 
    endif() 

    configure_file(documentation/doxygen.in ${PROJECT_BINARY_DIR}/Doxyfile @ONLY) 
    add_custom_target(doxygen-doc 
                      COMMAND ${DOXYGEN_EXECUTABLE} ${PROJECT_BINARY_DIR}/Doxyfile 
                      SOURCES ${PROJECT_BINARY_DIR}/Doxyfile) 

    add_dependencies(doc doxygen-doc) 
endif() 

find_program(ASCIIDOC_PATH asciidoc) 
find_program(SOURCE_HIGHLIGHT_PATH source-highlight) 
if ("${ASCIIDOC_PATH}" STREQUAL "ASCIIDOC_PATH-NOTFOUND") 
    message(WARNING "asciidoc is not installed. Readme can not be built.") 
elseif("${SOURCE_HIGHLIGHT_PATH}" STREQUAL "SOURCE_HIGHLIGHT_PATH-NOTFOUND") 
    message(WARNING "source-highlight is not installed. Readme can not be built.") 
else() 
    message("asciidoc found") 
    message("source-highlight found") 
    add_custom_command(TARGET doc 
                       POST_BUILD 
                       COMMAND asciidoc 
                               -a version=${VSOMEIP_VERSION} 
                               -b html 
                               -o documentation/vsomeipUserGuide.html 
                               ${PROJECT_BINARY_DIR}/../documentation/vsomeipUserGuide) 
endif() 

############################################################################## 
# create pkg-config file 
if(NOT WIN32) 
        configure_file(vsomeip.pc.in ${PROJECT_BINARY_DIR}/vsomeip.pc @ONLY) 
        install(FILES ${PROJECT_BINARY_DIR}/vsomeip.pc DESTINATION lib/pkgconfig) 
endif() 

############################################################################## 
# build daemon (Non-Windows only) 
if (NOT MSVC) 
add_custom_target( daemon ) 
add_subdirectory( daemon ) 
endif() 

# build tools 
add_custom_target( tools ) 
add_subdirectory( tools ) 

# build examples 
add_custom_target( examples ) 
add_subdirectory( examples EXCLUDE_FROM_ALL ) 

# build plugins located directly in the build tree 
# (Non-Windows only) 
if (NOT MSVC) 
    if(EXISTS "${PROJECT_SOURCE_DIR}/plugins/CMakeLists.txt") 
       # build plugins if available 
       message("Plugins CMakeList.txt found: Build plugins") 
       add_subdirectory( plugins ) 
    endif() 
endif() 


############################################################################## 
# Test section 
############################################################################## 

############################################################################## 
# google test 

# check for set environment variable 
if(DEFINED ENV{GTEST_ROOT}) 
    message("GTEST_ROOT is set. GTEST_ROOT = $ENV{GTEST_ROOT}") 
else() 
    message("GTEST_ROOT is not defined. For building the tests environment variable 
             GTEST_ROOT have to be defined. Tests can not be built.") 
    # early exit 
    return()  # test can not be build -> make commands build_tests and check are not available 
endif() 

# build google test as static library (always) -> therefore deactivate BUILD_SHARED_LIBS in case it is active 
set(BUILD_SHARED_LIBS_AUTOMATIC_OFF 0) 
if ("${BUILD_SHARED_LIBS}" STREQUAL "ON") 
    set(BUILD_SHARED_LIBS OFF) 
    set(BUILD_SHARED_LIBS_AUTOMATIC_OFF 1) 
endif() 
add_subdirectory($ENV{GTEST_ROOT} ${CMAKE_CURRENT_BINARY_DIR}/gtest EXCLUDE_FROM_ALL) 
if ("${BUILD_SHARED_LIBS_AUTOMATIC_OFF}" STREQUAL "1") 
    set(BUILD_SHARED_LIBS ON) 
    set(BUILD_SHARED_LIBS_AUTOMATIC_OFF 0) 
endif() 



############################################################################## 
# build tests 

enable_testing() 
SET(TESTS_BAT "OFF" CACHE BOOL 
    "Controls whether only BAT tests should be build or not") 
SET(TEST_SYMLINK_CONFIG_FILES "OFF" CACHE BOOL 
    "Controls if the json and scripts needed needed to run the tests are copied or symlinked into the build directroy (ignored on Windows)") 
SET(TEST_SYMLINK_CONFIG_FILES_RELATIVE "OFF" CACHE BOOL 
    "Controls if the json and scripts needed needed to run the tests are symlinked relatively into the build directroy (ignored on Windows)") 

SET(TEST_IP_DEFAULT_VALUE "XXX.XXX.XXX.XXX") 
SET(TEST_IP_MASTER "${TEST_IP_DEFAULT_VALUE}" CACHE STRING 
    "The IP address of the interface which will act as test master") 
SET(TEST_IP_SLAVE "${TEST_IP_DEFAULT_VALUE}" CACHE STRING 
    "The IP address of the interface which will act as test slave") 

if((${TEST_IP_MASTER} STREQUAL ${TEST_IP_DEFAULT_VALUE}) OR 
   (${TEST_IP_SLAVE}  STREQUAL ${TEST_IP_DEFAULT_VALUE})) 
    message(WARNING "TEST_IP_MASTER and/or TEST_IP_SLAVE isn't set. " 
                    "Only local tests will be runnable " 
                    "Please specify them via for example " 
                    "-DTEST_IP_MASTER=10.0.3.1 -DTEST_IP_SLAVE=10.0.3.125") 
endif() 

add_custom_target(build_tests) 
add_dependencies(build_tests vsomeip) 
add_dependencies(build_tests vsomeip-sd) 

set(CMAKE_CTEST_COMMAND ctest -V) 
add_custom_target(check COMMAND ${CMAKE_CTEST_COMMAND}) 

add_dependencies(check build_tests) 

############################################################################## 
# add test directory 

add_subdirectory( test EXCLUDE_FROM_ALL ) 

Step 5: Enter the below command to build the someip
	cd ~/someip/vsomeip
	mkdir builld
	cd build
	cmake -DCMAKE_TOOLCHAIN_FILE=arm-toolchain.cmake ..
Step 6: once successfully build someip library generated and include files  in below path
	  LibPath:
	 ~/someip/vsomeip/build
	 IncludePath:
	~/someip/vsomeip/interface/vsomeip

Building Sample SomeIp Application
	Once vsomeip library is geneared sample application can be builded by using same .
Step 1: Create the file “arm-toolchain.cmake” in ~/someip/vsomeip/examples/hello_world
	touch ~/someip/vsomeip/examples/hello_world/ arm-toolchain.cmake
Step 2: copy the below content into the  arm-toolchain.cmake file
SET(CMAKE_SYSTEM_NAME Linux)
	SET(CMAKE_SYSTEM_VERSION 1)
	SET(CMAKE_SYSTEM_PROCESSOR arm)

	SET(CMAKE_C_COMPILER   arm-linux-androideabi-gcc)
	SET(CMAKE_CXX_COMPILER arm-linux-androideabi-g++)

	SET (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} --sysroot=~/someip/android-ndk-r15c/platforms/android-16/arch-arm" CACHE STRING "" FORCE)
	SET (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} --sysroot=~/someip/android-ndk-r15c/platforms/android-16/arch-arm" CACHE STRING "" FORCE)

	SET(CMAKE_FIND_ROOT_PATH "~/someip/Boost-for-Android/build/lib ~/someip/android-ndk-r15c/sources/cxx-stl/gnu-libstdc++/4.9/libs/armeabi ~/someip/genivi-dlt-android/libs/armeabi ~/someip/vsomeip/build/lib" )
	SET(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
	SET(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
	SET(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
Step 3: Copy below content to the “CmakeLists.txt” in ~/someip/vsomeip/examples/hello_world

# Copyright (C) 2015-2017 Bayerische Motoren Werke Aktiengesellschaft (BMW AG)
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

cmake_minimum_required (VERSION 2.8.7)
project (vSomeIPHelloWorld)

# This will get us acces to
#   VSOMEIP_INCLUDE_DIRS - include directories for vSomeIP
#   VSOMEIP_LIBRARIES    - libraries to link against

include_directories(~/someip/android-ndk-r10e/sources/cxx-stl/gnu-libstdc++/4.9/include)
include_directories(~/someip/android-ndk-r10e/sources/cxx-stl/gnu-libstdc++/4.9/libs/armeabi/include)
include_directories(~/someip/android-ndk-r10e/platforms/android-19/arch-arm/usr/include)
include_directories(~/someip/genivi-dlt-android/include)
include_directories(~/someip/genivi-dlt-android/musl/include)
set (DLT_INCLUDE_DIRS "${CMAKE_CURRENT_SOURCE_DIR}/../../../genivi-dlt-android/include")
set (DLT_LIBDIR "${CMAKE_CURRENT_SOURCE_DIR}/../../../genivi-dlt-android/libs/armeabi")
set (clib "${CMAKE_CURRENT_SOURCE_DIR}/../../../android-ndk-r10e/sources/cxx-stl/gnu-libstdc++/4.9/libs/armeabi")
set (arch-arm "~/someip/android-ndk-r10e/platforms/android-16/arch-arm/usr/lib")
set (VSOMEIP_INCLUDE_DIRS "~/someip/vsomeip/interface")
include_directories(~/someip/vsomeip/interface)
link_directories(${arch-arm})
link_directories(${clib})
set (VSOMEIP_LIBRARIES "~/someip/vsomeip/build/libs")
#find_package(vsomeip)
#if (NOT vsomeip_FOUND)
#    message("vsomeip was not found. Please specify vsomeip_DIR")
#endif()

find_package(Threads REQUIRED)

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -lgnustl_shared -fPIE -pie ")
set(LIBS "~/someip/vsomeip/build/libs/libvsomeip-cfg.so")
set(LIBS1 "~/someip/vsomeip/build/libs/libvsomeip-sd.so")
set(LIBS2 "~/someip/vsomeip/build/libs/libvsomeip.so")
include_directories(${VSOMEIP_INCLUDE_DIRS})

add_executable (hello_world_service hello_world_service.cpp)
target_link_libraries(hello_world_service ${VSOMEIP_LIBRARIES} ${LIBS}  ${LIBS1} ${LIBS2} ${CMAKE_THREAD_LIBS_INIT} ${clib} ${arch-arm})

add_executable (hello_world_client hello_world_client.cpp)
target_link_libraries(hello_world_client ${VSOMEIP_LIBRARIES} ${LIBS} ${LIBS1} ${LIBS2} ${CMAKE_THREAD_LIBS_INIT} ${clib} ${arch-arm})

Step 4: To build example application follow below commands
	cd  ~/someip/vsomeip/examples/hello_world
	mkdir builld
	cd build
	cmake -DCMAKE_TOOLCHAIN_FILE=arm-toolchain.cmake ..
Step 5: Example application binary generated in below path
	~/someip/vsomeip/examples/hello_world/build	

			Errors and Solution 

1. cannot find the -ltr  or lpthread while building any library 
	Solution : Execute below commands 
		cd ~/someip/android-ndk-r15c/platforms/android-19/arch-arm/usr/lib/
		ln -s libc.so librt.so
		ln -s  libc.so libpthread.so
	Explanation:
		In Android there is no seperate library for libpthread and librt . Only libc.so has all 		the dependency
2. Cannot find “arm-linux-androideabi-g++”  or “arm-linux-androideabi-gcc”
	Solution :
		export PATH=$PATH:~/someip/android-ndk-r15c/toolchains/arm-linux-androideabi-		4.9/prebuilt/linux-x86_64/bin/
3. Cannot fine the “stoul” not a part of std:: namespace 
	Workround solution done using below file get created with proper function.
	Solution :
		touch ~/someip/android-ndk-r15c/sources/cxx-stl/gnu-libstdc++/4.9/include/myfile.h
		copy below content to the myfile.h
#ifndef MYFILE_H
#define MYFILE_H
#include <string>
#include <stdexcept>
#include <cstdlib>
#include <climits>
#include <cerrno>
#if defined(__ANDROID__)
namespace std {
unsigned long stoul(std::string const& str, size_t *idx = 0, int base = 10) {
    char *endp;
    unsigned long value = strtoul(str.c_str(), &endp, base);
    if (endp == str.c_str()) {
        throw std::invalid_argument("my_stoul");
    }
    if (value == ULONG_MAX && errno == ERANGE) {
        throw std::out_of_range("my_stoul");
    }
    if (idx) {
        *idx = endp - str.c_str();
    }
    return value;
}
}
#endif

#endif //MYFILE_H

4.Error related to dlt , please follow the below link;
	https://github.com/CecilHarvey/genivi-dlt-android

5.In the someip code you might get the error releaed to shared memory (“shm_open” undefined )
	Solution:
	Now all shared memory related function calls are commented. You need doto



					References
1.https://github.com/GENIVI/vsomeip
2.https://github.com/GENIVI/vsomeip/wiki/vsomeip-in-10-minutes

Further your queries and other doubts related someip porting kinldy post in below links.
1.https://github.com/GENIVI/vsomeip/issues
